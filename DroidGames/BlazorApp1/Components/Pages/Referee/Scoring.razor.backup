@page "/referee/scoring"
@using BlazorApp1.Models
@using BlazorApp1.Services
@inject ITeamService TeamService
@inject IMapService MapService
@inject IScoreService ScoreService
@inject UserSession UserSession
@rendermode InteractiveServer

<PageTitle>Bodov√°n√≠ - Rozhodƒç√≠</PageTitle>

<BlazorApp1.Components.Shared.AuthGuard RequiredRole="BlazorApp1.Models.UserRole.Referee">
    <div class="referee-scoring-container">
        
        @if (!_isInitialized)
        {
            <div class="loading-state">
                <div class="spinner"></div>
                <p>Naƒç√≠t√°n√≠...</p>
            </div>
        }
        else if (_currentRound == null)
        {
            <div class="no-round-state">
                <span class="material-symbols-outlined">event_busy</span>
                <h2>≈Ω√°dn√© aktivn√≠ kolo</h2>
                <p>V tuto chv√≠li neprob√≠h√° ≈æ√°dn√© kolo, kter√© byste mohli bodovat.</p>
            </div>
        }
        else
        {
            <!-- Header -->
            <div class="scoring-header">
                <div class="round-info">
                    <h1>
                        <span class="material-symbols-outlined">edit_note</span>
                        Bodov√°n√≠ - Kolo @_currentRound.RoundNumber
                    </h1>
                    <div class="teams-info">
                        <div class="team-badge">@_team1?.Name</div>
                        <span class="vs-text">VS</span>
                        <div class="team-badge">@_team2?.Name</div>
                    </div>
                </div>
                
                <div class="timer-section">
                    @if (_isRunning)
                    {
                        <div class="timer running">
                            <span class="material-symbols-outlined">timer</span>
                            <span class="time">@FormatTime(_elapsedSeconds)</span>
                        </div>
                    }
                    else if (_elapsedSeconds > 0)
                    {
                        <div class="timer finished">
                            <span class="material-symbols-outlined">check_circle</span>
                            <span class="time">@FormatTime(_elapsedSeconds)</span>
                        </div>
                    }
                </div>
            </div>

            <!-- Team Selection -->
            <div class="team-selection">
                <button class="team-select-btn @(_selectedTeamId == _team1?.Id ? "active" : "")"
                        @onclick="() => SelectTeam(_team1?.Id ?? string.Empty)">
                    <span class="material-symbols-outlined">groups</span>
                    @_team1?.Name
                </button>
                <button class="team-select-btn @(_selectedTeamId == _team2?.Id ? "active" : "")"
                        @onclick="() => SelectTeam(_team2?.Id ?? string.Empty)">
                    <span class="material-symbols-outlined">groups</span>
                    @_team2?.Name
                </button>
            </div>

            @if (!string.IsNullOrEmpty(_selectedTeamId) && _selectedMap != null)
            {
                <!-- Interactive Map -->
                <div class="map-scoring-section">
                    <div class="map-header">
                        <h2>@_selectedMap.Name</h2>
                        <div class="current-score">
                            <span class="label">Aktu√°ln√≠ sk√≥re:</span>
                            <span class="score">@_currentScore bod≈Ø</span>
                        </div>
                    </div>

                    <div class="map-container">
                        <div class="map-grid">
                            @for (int y = 0; y < 6; y++)
                            {
                                @for (int x = 0; x < 9; x++)
                                {
                                    var block = GetBlockAt(x, y);
                                    var eventIds = GetBlockEventIds(x, y);
                                    var hasEvents = eventIds.Any();
                                    
                                    <div class="map-cell @GetBlockClass(block) @(hasEvents ? "has-events" : "")"
                                         @onclick="() => OnBlockClick(block, x, y)">
                                        
                                        @if (block != null)
                                        {
                                            <div class="block-icon">
                                                @GetBlockIcon(block.Type)
                                            </div>
                                            
                                            @if (hasEvents)
                                            {
                                                <div class="event-numbers">
                                                    @foreach (var eventId in eventIds)
                                                    {
                                                        <span class="event-num">@eventId</span>
                                                    }
                                                </div>
                                            }
                                        }
                                        
                                        <div class="cell-coords">@x,@y</div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>

                <!-- Score Summary - Tabulka ud√°lost√≠ -->
                <div class="score-summary">
                    <h3>üìã Ud√°losti (po≈ôad√≠ kliknut√≠)</h3>
                    <div class="events-table">
                        @if (_scoringEvents.Any())
                        {
                            <table>
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>Pozice</th>
                                        <th>Ud√°lost</th>
                                        <th>Body</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var evt in _scoringEvents.OrderBy(e => e.Id))
                                    {
                                        <tr>
                                            <td class="event-id">@evt.Id</td>
                                            <td class="event-pos">[@evt.X, @evt.Y]</td>
                                            <td class="event-desc">@evt.Description</td>
                                            <td class="event-points @(evt.Points > 0 ? "positive" : "negative")">
                                                @(evt.Points > 0 ? "+" : "")@evt.Points
                                            </td>
                                            <td class="event-actions">
                                                <button class="btn-remove" @onclick="() => RemoveEvent(evt.Id)" title="Smazat ud√°lost">
                                                    <span class="material-symbols-outlined">close</span>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <p class="no-events">Zat√≠m ≈æ√°dn√© ud√°losti. Kliknƒõte na bloky na mapƒõ.</p>
                        }
                    </div>
                    
                    <div class="total-score-display">
                        <span class="label">Celkem:</span>
                        <span class="total">@_currentScore bod≈Ø</span>
                    </div>
                </div>

                <!-- Submit Button -->
                <div class="submit-section">
                    <button class="btn btn-primary btn-lg" 
                            @onclick="SubmitScore"
                            disabled="@(_scoringEvents.Count == 0 || _isSubmitting)">
                        <span class="material-symbols-outlined">send</span>
                        Odeslat hodnocen√≠
                        @if (_isSubmitting)
                        {
                            <span class="spinner-small"></span>
                        }
                    </button>
                </div>
            }
            else
            {
                <div class="select-team-prompt">
                    <span class="material-symbols-outlined">touch_app</span>
                    <p>Vyberte t√Ωm pro bodov√°n√≠</p>
                </div>
            }
        }

        @if (!string.IsNullOrEmpty(_statusMessage))
        {
            <div class="toast @(_isError ? "error" : "success")">
                <span class="material-symbols-outlined">
                    @(_isError ? "error" : "check_circle")
                </span>
                @_statusMessage
            </div>
        }
    </div>
</BlazorApp1.Components.Shared.AuthGuard>

@code {
    private bool _isInitialized = false;
    private MapConfiguration? _selectedMap = null;
    private Team? _team1 = null;
    private Team? _team2 = null;
    private string _selectedTeamId = string.Empty;
    private RoundParticipation? _currentRound = null;
    
    private int _currentScore = 0;
    private List<ScoringEvent> _scoringEvents = new();
    private int _nextEventId = 1;
    private Dictionary<string, List<int>> _blockEventIds = new(); // Track which events belong to each block
    
    private bool _isRunning = false;
    private int _elapsedSeconds = 0;
    private System.Threading.Timer? _timer;
    
    private bool _isSubmitting = false;
    private string _statusMessage = string.Empty;
    private bool _isError = false;

    private class ScoringEvent
    {
        public int Id { get; set; }
        public int X { get; set; }
        public int Y { get; set; }
        public MapBlockType BlockType { get; set; }
        public string Description { get; set; } = string.Empty;
        public int Points { get; set; }
        public DateTime Timestamp { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        _isInitialized = true;
    }

    private async Task LoadData()
    {
        // TODO: Load current active round from competition status
        // For now, we'll create a mock scenario
        
        var teams = await TeamService.GetAllTeamsAsync();
        if (teams.Count >= 2)
        {
            _team1 = teams[0];
            _team2 = teams[1];
        }
        
        var maps = await MapService.GetAllMapsAsync();
        if (maps.Any())
        {
            _selectedMap = maps.FirstOrDefault(m => m.IsPublished);
        }
        
        // Mock current round
        _currentRound = new RoundParticipation
        {
            RoundNumber = 1,
            MapConfigurationId = _selectedMap?.Id ?? string.Empty
        };
    }

    private void SelectTeam(string teamId)
    {
        _selectedTeamId = teamId;
        ResetScoring();
    }

    private void ResetScoring()
    {
        _scoringEvents.Clear();
        _blockEventIds.Clear();
        _nextEventId = 1;
        _currentScore = 0;
    }

    private MapBlock? GetBlockAt(int x, int y)
    {
        return _selectedMap?.Blocks.FirstOrDefault(b => b.X == x && b.Y == y);
    }

    private List<int> GetBlockEventIds(int x, int y)
    {
        var key = $"{x},{y}";
        return _blockEventIds.GetValueOrDefault(key, new List<int>());
    }

    private void OnBlockClick(MapBlock? block, int x, int y)
    {
        if (block == null || string.IsNullOrEmpty(_selectedTeamId) || block.Type == MapBlockType.Empty || block.Type == MapBlockType.Rock) 
            return;
        
        var key = $"{x},{y}";
        
        // P≈ôid√°n√≠ ud√°losti podle typu bloku
        if (block.Type == MapBlockType.BlueCrystal)
        {
            // Automaticky p≈ôid√°me 2 ud√°losti: dotyk (+1) a validn√≠ p≈ôesun (+1)
            var touchEvent = new ScoringEvent
            {
                Id = _nextEventId++,
                X = x,
                Y = y,
                BlockType = block.Type,
                Description = "üíé Dotyk krystalu",
                Points = 1,
                Timestamp = DateTime.Now
            };
            
            var moveEvent = new ScoringEvent
            {
                Id = _nextEventId++,
                X = x,
                Y = y,
                BlockType = block.Type,
                Description = "üìè Validn√≠ p≈ôesun",
                Points = 1,
                Timestamp = DateTime.Now
            };
            
            _scoringEvents.Add(touchEvent);
            _scoringEvents.Add(moveEvent);
            
            if (!_blockEventIds.ContainsKey(key))
                _blockEventIds[key] = new List<int>();
            
            _blockEventIds[key].Add(touchEvent.Id);
            _blockEventIds[key].Add(moveEvent.Id);
            
            _currentScore += 2;
        }
        else if (block.Type == MapBlockType.YellowSulfur)
        {
            var sulfurEvent = new ScoringEvent
            {
                Id = _nextEventId++,
                X = x,
                Y = y,
                BlockType = block.Type,
                Description = "üü° Naru≈°en√≠ s√≠ry",
                Points = -1,
                Timestamp = DateTime.Now
            };
            
            _scoringEvents.Add(sulfurEvent);
            
            if (!_blockEventIds.ContainsKey(key))
                _blockEventIds[key] = new List<int>();
            
            _blockEventIds[key].Add(sulfurEvent.Id);
            
            _currentScore -= 1;
        }
        
        StateHasChanged();
    }

    private void RemoveEvent(int eventId)
    {
        var eventToRemove = _scoringEvents.FirstOrDefault(e => e.Id == eventId);
        if (eventToRemove == null) return;
        
        _scoringEvents.Remove(eventToRemove);
        _currentScore -= eventToRemove.Points;
        
        // Odebrat z blockEventIds
        var key = $"{eventToRemove.X},{eventToRemove.Y}";
        if (_blockEventIds.ContainsKey(key))
        {
            _blockEventIds[key].Remove(eventId);
            if (_blockEventIds[key].Count == 0)
                _blockEventIds.Remove(key);
        }
        
        StateHasChanged();
    }
            Type = _currentBlockForModal.Type,
            FirstTouched = firstTouch,
            ValidMove = validMove,
            ExcessiveMove = excessiveMove,
            TouchCount = 1
        };
        
        _blockManipulations[key] = manipulation;
        
        if (!_isRepeatManipulation)
        {
            _lastManipulatedBlock = key;
        }
        
        CloseManipulationModal();
        RecalculateScore();
    }

    private void AddSulfurManipulation(string key, MapBlock block)
    {
        var manipulation = new BlockManipulation
        {
            Type = block.Type,
            FirstTouched = false,
            ValidMove = false,
            ExcessiveMove = false,
            TouchCount = 1
        };
        
        _blockManipulations[key] = manipulation;
        _hasAnySulfurTouch = true;
    }

    private void RemoveManipulation(string key, MapBlock block)
    {
        _blockManipulations.Remove(key);
        
        if (_lastManipulatedBlock == key)
        {
            _lastManipulatedBlock = null;
        }
        
        // Check if any sulfur is still touched
        _hasAnySulfurTouch = _blockManipulations.Any(m => m.Value.Type == MapBlockType.YellowSulfur);
    }

    private void RecalculateScore()
    {
        _scoreBreakdown.Clear();
        int score = 0;
        
        // Count blue crystals
        int crystalFirstTouches = 0;
        int crystalValidMoves = 0;
        int crystalExcessiveMoves = 0;
        
        // Count yellow sulfur
        int sulfurDisruptions = 0;
        
        foreach (var kvp in _blockManipulations)
        {
            var manipulation = kvp.Value;
            
            if (manipulation.Type == MapBlockType.BlueCrystal)
            {
                if (manipulation.FirstTouched)
                {
                    crystalFirstTouches++;
                    score += 1; // +1 for first touch
                }
                
                if (manipulation.ValidMove)
                {
                    crystalValidMoves++;
                    score += 1; // +1 for valid move (140-280mm)
                }
                
                if (manipulation.ExcessiveMove)
                {
                    crystalExcessiveMoves++;
                    score -= 2; // -2 for excessive move (>280mm)
                }
            }
            else if (manipulation.Type == MapBlockType.YellowSulfur)
            {
                sulfurDisruptions++;
                score -= 1; // -1 for any sulfur disruption (>140mm)
            }
        }
        
        // Bonus for no sulfur touch
        if (!_hasAnySulfurTouch && _blockManipulations.Any(m => m.Value.Type == MapBlockType.BlueCrystal))
        {
            score += 2;
            _scoreBreakdown["Bonus za opatrnost (bez dotyku s√≠ry)"] = 2;
        }
        
        // Build breakdown
        if (crystalFirstTouches > 0)
        {
            _scoreBreakdown[$"Dotyk krystal≈Ø ({crystalFirstTouches}√ó)"] = crystalFirstTouches;
        }
        
        if (crystalValidMoves > 0)
        {
            _scoreBreakdown[$"Validn√≠ p≈ôesuny krystal≈Ø ({crystalValidMoves}√ó)"] = crystalValidMoves;
        }
        
        if (crystalExcessiveMoves > 0)
        {
            _scoreBreakdown[$"P≈ô√≠li≈°n√© posuny krystal≈Ø ({crystalExcessiveMoves}√ó)"] = -(crystalExcessiveMoves * 2);
        }
        
        if (sulfurDisruptions > 0)
        {
            _scoreBreakdown[$"Naru≈°en√≠ s√≠ry ({sulfurDisruptions}√ó)"] = -sulfurDisruptions;
        }
        
        _currentScore = score;
    }

    private string GetBlockClass(MapBlock? block)
    {
        if (block == null) return "empty";
        
        return block.Type switch
        {
            MapBlockType.Rock => "rock",
            MapBlockType.BlueCrystal => "blue-crystal",
            MapBlockType.YellowSulfur => "yellow-sulfur",
            _ => "empty"
        };
    }

    private string GetBlockIcon(MapBlockType type)
    {
        return type switch
        {
            MapBlockType.Rock => "ÔøΩ",
            MapBlockType.BlueCrystal => "üíé",
            MapBlockType.YellowSulfur => "üü°",
            _ => ""
        };
    }

    private async Task SubmitScore()
    {
        if (string.IsNullOrEmpty(_selectedTeamId) || _currentScore == 0) return;
        
        try
        {
            _isSubmitting = true;
            _statusMessage = "Odes√≠l√°m hodnocen√≠...";
            StateHasChanged();
            
            var refereeScore = new RefereeScore
            {
                RefereeId = UserSession.UserId ?? "referee1",
                ScoreBreakdown = new Dictionary<string, int>(_scoreBreakdown),
                TotalScore = _currentScore,
                SubmittedAt = DateTime.UtcNow
            };
            
            await ScoreService.SubmitRefereeScoreAsync(
                _selectedTeamId, 
                _currentRound!.RoundNumber, 
                refereeScore
            );
            
            _statusMessage = $"‚úÖ Hodnocen√≠ odesl√°no! T√Ωm z√≠skal {_currentScore} bod≈Ø.";
            _isError = false;
            
            // Reset scoring
            await Task.Delay(2000);
            ResetScoring();
        }
        catch (Exception ex)
        {
            _statusMessage = $"‚ùå Chyba p≈ôi odes√≠l√°n√≠: {ex.Message}";
            _isError = true;
        }
        finally
        {
            _isSubmitting = false;
            StateHasChanged();
            
            await Task.Delay(3000);
            _statusMessage = string.Empty;
            StateHasChanged();
        }
    }

    private string FormatTime(int seconds)
    {
        var ts = TimeSpan.FromSeconds(seconds);
        return $"{ts.Minutes:D2}:{ts.Seconds:D2}";
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}

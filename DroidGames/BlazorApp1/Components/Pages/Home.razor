@page "/"
@inject BlazorApp1.Services.ITeamService TeamService
@inject BlazorApp1.Services.UserSession UserSession
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>DROID GAMES 2026</PageTitle>

<!-- Hero Section -->
<div class="hero-section">
    <div class="hero-content">
        <img src="/graphic/DroidGames_logo_barva_v1.png" alt="Droid Games 2026" class="hero-logo" />
        <h1 class="hero-title">DROID GAMES 2026</h1>
        <p class="hero-subtitle">Soutěž v robotice | Centrum Robotiky Plzeň</p>
    </div>
</div>

<div class="home-container">
    @if (_isLoading)
    {
        <!-- Loading skeleton -->
        <div class="loading-skeleton">
            <div class="skeleton-header"></div>
            <div class="skeleton-cards">
                <div class="skeleton-card"></div>
                <div class="skeleton-card"></div>
                <div class="skeleton-card"></div>
            </div>
        </div>
    }
    else if (_error != null)
    {
        <div class="status-card error">
            <h2>
                <span class="material-symbols-outlined">error</span>
                Chyba při načítání
            </h2>
            <pre class="error-message">@_error</pre>
            <button class="btn-retry" @onclick="ReloadData">
                <span class="material-symbols-outlined">refresh</span>
                Zkusit znovu
            </button>
        </div>
    }
    else
    {
        <!-- Leaderboard -->
        <div class="leaderboard-section">
            <h2 class="section-title">
                <span class="material-symbols-outlined">leaderboard</span>
                Žebříček týmů
            </h2>
            @if (_teams != null && _teams.Any())
            {
                <div class="teams-grid">
                    @foreach (var (team, index) in _teams.Select((t, i) => (t, i)))
                    {
                        <div class="team-card" style="animation-delay: @(index * 0.1)s">
                            <div class="team-rank">@(index + 1)</div>
                            <div class="team-info">
                                <div class="team-name">@team.Name</div>
                                <div class="team-school">@team.School</div>
                            </div>
                            <div class="team-score">
                                <div class="score-value">@team.TotalScore</div>
                                <div class="score-label">bodů</div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="empty-state">
                    <span class="material-symbols-outlined">emoji_events</span>
                    <p>Žebříček bude zveřejněn po začátku soutěže</p>
                </div>
            }
        </div>
    }
    
    <!-- Debug Log - Only for Admins -->
    @if (UserSession.HasRole(BlazorApp1.Models.UserRole.Admin) && !string.IsNullOrEmpty(_debugLog))
    {
        <div class="debug-section">
            <h3>
                <span class="material-symbols-outlined">bug_report</span>
                Admin Debug Log
            </h3>
            <pre class="debug-log">@_debugLog</pre>
        </div>
    }
</div>

@code {
    private bool _isLoading = true;
    private string? _error = null;
    private int _teamCount = 0;
    private List<BlazorApp1.Models.Team>? _teams = null;
    private string _debugLog = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _isLoading = true;
        _error = null;
        _debugLog = "";
        StateHasChanged();
        
        try
        {
            AddDebugLog("OnInitializedAsync začíná");
            StateHasChanged();
            
            AddDebugLog("Volám TeamService.GetLeaderboardAsync()");
            _teams = await TeamService.GetLeaderboardAsync();
            
            _teamCount = _teams?.Count ?? 0;
            AddDebugLog($"Načteno {_teamCount} týmů");
            
            _isLoading = false;
            AddDebugLog("Načítání úspěšně dokončeno");
        }
        catch (Exception ex)
        {
            _error = $"Typ: {ex.GetType().Name}\nZpráva: {ex.Message}\n\nStack Trace:\n{ex.StackTrace}";
            AddDebugLog($"CHYBA: {ex.GetType().Name} - {ex.Message}");
            _isLoading = false;
        }
        
        StateHasChanged();
    }

    private async Task ReloadData()
    {
        await LoadData();
    }

    private void AddDebugLog(string message)
    {
        var timestamp = DateTime.Now.ToString("HH:mm:ss.fff");
        _debugLog += $"[{timestamp}] {message}\n";
    }
}

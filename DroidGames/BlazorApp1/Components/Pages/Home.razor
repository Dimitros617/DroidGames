@page "/"
@inject BlazorApp1.Services.ITeamService TeamService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>DROID GAMES 2026</PageTitle>

<div class="home-container">
    <h1 class="page-title">
        <span class="material-symbols-outlined">emoji_events</span>
        DROID GAMES 2026
    </h1>
    
    @if (_isLoading)
    {
        <div class="status-card loading">
            <h2>
                <span class="material-symbols-outlined">hourglass_empty</span>
                Načítání dat...
            </h2>
            <p>@_status</p>
        </div>
    }
    else if (_error != null)
    {
        <div class="status-card error">
            <h2>
                <span class="material-symbols-outlined">error</span>
                Chyba
            </h2>
            <pre class="error-message">@_error</pre>
            <button class="btn-retry" @onclick="ReloadData">
                <span class="material-symbols-outlined">refresh</span>
                Zkusit znovu
            </button>
        </div>
    }
    else
    {
        <div class="status-card success">
            <h2>
                <span class="material-symbols-outlined">check_circle</span>
                Aplikace načtena úspěšně!
            </h2>
            <p>Načteno týmů: @_teamCount</p>
        </div>
        
        <div class="leaderboard-section">
            <h3 class="section-title">
                <span class="material-symbols-outlined">leaderboard</span>
                Žebříček týmů
            </h3>
            @if (_teams != null && _teams.Any())
            {
                <div class="teams-grid">
                    @foreach (var team in _teams)
                    {
                        <div class="team-card">
                            <div class="team-info">
                                <div class="team-name">@team.Name</div>
                                <div class="team-pin">PIN: @team.PinCode</div>
                            </div>
                            <div class="team-score">@team.TotalScore bodů</div>
                        </div>
                    }
                </div>
            }
            else
            {
                <p class="empty-message">Žádné týmy zatím nebyly přidány.</p>
            }
        </div>
        
        <button class="btn-reload" @onclick="ReloadData">
            <span class="material-symbols-outlined">refresh</span>
            Znovu načíst data
        </button>
    }
    
    <div class="debug-section">
        <h3>
            <span class="material-symbols-outlined">bug_report</span>
            Debug Log
        </h3>
        <pre class="debug-log">@_debugLog</pre>
    </div>
</div>

@code {
    private bool _isLoading = true;
    private string? _error = null;
    private string _status = "Inicializace...";
    private int _teamCount = 0;
    private List<BlazorApp1.Models.Team>? _teams = null;
    private string _debugLog = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _isLoading = true;
        _error = null;
        _debugLog = "";
        _status = "Připojování k TeamService...";
        StateHasChanged();
        
        try
        {
            AddDebugLog("OnInitializedAsync začíná");
            _status = "Načítání žebříčku...";
            StateHasChanged();
            
            AddDebugLog("Volám TeamService.GetLeaderboardAsync()");
            _teams = await TeamService.GetLeaderboardAsync();
            
            _teamCount = _teams?.Count ?? 0;
            AddDebugLog($"Načteno {_teamCount} týmů");
            
            _status = "Hotovo!";
            _isLoading = false;
            AddDebugLog("Načítání úspěšně dokončeno");
        }
        catch (Exception ex)
        {
            _error = $"Typ: {ex.GetType().Name}\nZpráva: {ex.Message}\n\nStack Trace:\n{ex.StackTrace}";
            AddDebugLog($"CHYBA: {ex.GetType().Name} - {ex.Message}");
            _isLoading = false;
        }
        
        StateHasChanged();
    }

    private async Task ReloadData()
    {
        await LoadData();
    }

    private void AddDebugLog(string message)
    {
        var timestamp = DateTime.Now.ToString("HH:mm:ss.fff");
        _debugLog += $"[{timestamp}] {message}\n";
    }
}

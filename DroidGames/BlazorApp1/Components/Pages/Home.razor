@page "/"
@inject BlazorApp1.Services.ITeamService TeamService
@inject BlazorApp1.Services.IFinalScoreService FinalScoreService
@inject BlazorApp1.Services.IScoreNotificationService ScoreNotificationService
@inject BlazorApp1.Services.ITimerService TimerService
@inject BlazorApp1.Services.IGameStatusService GameStatusService
@inject BlazorApp1.Data.IRepository<BlazorApp1.Models.CompetitionSettings> SettingsRepository
@inject BlazorApp1.Data.IRepository<BlazorApp1.Models.RoundOrder> RoundOrderRepository
@inject BlazorApp1.Services.UserSession UserSession
@inject BlazorApp1.Services.ICompetitionNotificationService CompetitionNotificationService
@inject NavigationManager Navigation
@implements IDisposable
@rendermode InteractiveServer

<PageTitle>DROID GAMES 2026 - LIVE V√ùSLEDKY</PageTitle>

<!-- Hero Section -->
<div class="hero-section">
    <div class="hero-content">
        <img src="/graphic/DroidGames_logo_barva_v1.png" alt="Droid Games 2026" class="hero-logo" />
    <h1 class="hero-title">ü§ñ DROID GAMES 2026</h1>
    <p class="hero-subtitle">Soutƒõ≈æ v robotice | Centrum Robotiky Plze≈à</p>
        
        @if (_settings != null)
        {
            <div class="round-indicator">
                <span class="round-badge">Kolo @_settings.CurrentRound z @_settings.TotalRounds</span>
                <span class="status-badge status-@_settings.Status.ToString().ToLower()">
                    @GetStatusText(_settings.Status)
                </span>
            </div>
        }
    </div>
</div>

<div class="home-container">
    @if (_isLoading)
    {
        <!-- Loading skeleton -->
        <div class="loading-skeleton">
            <div class="skeleton-header"></div>
            <div class="skeleton-cards">
                <div class="skeleton-card"></div>
                <div class="skeleton-card"></div>
                <div class="skeleton-card"></div>
            </div>
        </div>
    }
    else if (_error != null)
    {
        <div class="status-card error">
            <h2>
                <span class="material-symbols-outlined">error</span>
                Chyba p≈ôi naƒç√≠t√°n√≠
            </h2>
            <pre class="error-message">@_error</pre>
            <button class="btn-retry" @onclick="ReloadData">
                <span class="material-symbols-outlined">refresh</span>
                Zkusit znovu
            </button>
        </div>
    }
    else
    {
        <div class="content-grid">
            <!-- Current Match Card -->
            @if (_currentTeamA != null && _currentTeamB != null)
            {
                <div class="current-match-card">
                    <h3 class="match-title">
                        <span class="material-symbols-outlined pulse">sports_esports</span>
                        Aktu√°ln√≠ z√°pas
                    </h3>
                    
                    <div class="match-teams">
                        <div class="match-team">
                            <div class="team-name-large">@_currentTeamA.Name</div>
                            <div class="team-school-small">@_currentTeamA.School</div>
                        </div>
                        <div class="vs-divider">VS</div>
                        <div class="match-team">
                            <div class="team-name-large">@_currentTeamB.Name</div>
                            <div class="team-school-small">@_currentTeamB.School</div>
                        </div>
                    </div>
                    
                    <!-- Timer Display nebo Status Display -->
                    @if (_currentGameStatus == BlazorApp1.Models.GameStatus.RoundInProgress)
                    {
                        <!-- Zobrazit ƒçasovaƒç kdy≈æ bƒõ≈æ√≠ j√≠zda -->
                        <div class="timer-display timer-@(_timerStatus.ToString().ToLower())">
                            <div class="timer-value">@FormatTime(_timerRemaining)</div>
                            <div class="timer-status">
                                <span class="status-dot running"></span>
                                <text>J√≠zda prob√≠h√°!</text>
                            </div>
                        </div>
                    }
                    else if (_currentGameStatus == BlazorApp1.Models.GameStatus.WaitingForScoring)
                    {
                        <!-- Zobrazit "ƒåek√° se na hodnocen√≠" -->
                        <div class="game-status-display waiting-scoring">
                            <div class="status-icon">‚è≥</div>
                            <div class="status-text-large">ƒåek√° se na v√Ωsledky...</div>
                            <div class="status-subtext">Rozhodƒç√≠ pr√°vƒõ vyhodnocuj√≠ j√≠zdu</div>
                        </div>
                    }
                    else if (_currentGameStatus == BlazorApp1.Models.GameStatus.PreparingNextRound)
                    {
                        <!-- Zobrazit "P≈ô√≠prava dal≈°√≠ j√≠zdy" -->
                        <div class="game-status-display preparing-next">
                            <div class="status-icon">üõ†Ô∏è</div>
                            <div class="status-text-large">P≈ôipravujeme dal≈°√≠ j√≠zdu</div>
                            <div class="status-subtext">V√Ωsledky budou brzy zve≈ôejnƒõny</div>
                        </div>
                    }
                    else if (_currentGameStatus == BlazorApp1.Models.GameStatus.Break)
                    {
                        <!-- Zobrazit "P≈ôest√°vka" -->
                        <div class="game-status-display break-status">
                            <div class="status-icon">‚òï</div>
                            <div class="status-text-large">P≈ôest√°vka</div>
                            <div class="status-subtext">Soutƒõ≈æ pokraƒçuje brzy</div>
                        </div>
                    }
                    else if (_currentGameStatus == BlazorApp1.Models.GameStatus.Finished)
                    {
                        <!-- Zobrazit "Ukonƒçeno" -->
                        <div class="game-status-display finished-status">
                            <div class="status-icon">üèÅ</div>
                            <div class="status-text-large">Soutƒõ≈æ ukonƒçena</div>
                            <div class="status-subtext">Dƒõkujeme za √∫ƒçast!</div>
                        </div>
                    }
                    else
                    {
                        <!-- Default - P≈ô√≠prava -->
                        <div class="timer-display timer-stopped">
                            <div class="timer-value">@FormatTime(_timerRemaining)</div>
                            <div class="timer-status">
                                <span class="status-dot stopped"></span>
                                <text>P≈ôipraveno</text>
                            </div>
                        </div>
                    }
                </div>
            }

            <!-- Next Match Info -->
            @if (_nextTeamA != null && _nextTeamB != null)
            {
                <div class="next-match-info">
                    <p class="next-match-label">
                        <span class="material-symbols-outlined rotating-hourglass">hourglass_empty</span>
                        N√°sleduj√≠c√≠:
                    </p>
                    <p class="next-match-teams">
                        <span class="next-team">@_nextTeamA.Name</span>
                        <span class="next-vs">vs</span>
                        <span class="next-team">@_nextTeamB.Name</span>
                    </p>
                </div>
            }

            <!-- Leaderboard -->
            <div class="leaderboard-section">
                <h2 class="section-title">
                    <span class="material-symbols-outlined">leaderboard</span>
                    Live ≈æeb≈ô√≠ƒçek
                    <span class="live-indicator" title="Automatick√° aktualizace aktivn√≠">
                        <span class="live-dot"></span> LIVE
                    </span>
                </h2>
                
                @if (_leaderboard != null && _leaderboard.Any())
                {
                    <div class="teams-list">
                        @foreach (var (entry, index) in _leaderboard.Select((e, i) => (e, i)))
                        {
                            var position = entry.Position;
                            var medalClass = position <= 3 ? $"medal-{position}" : "";
                            var positionChange = GetPositionChange(entry.TeamId);
                            
                            <div class="team-row @medalClass @GetPositionChangeClass(positionChange)" 
                                 style="animation-delay: @(index * 0.05)s">
                                <div class="team-position">
                                    @if (position == 1)
                                    {
                                        <span class="medal">ü•á</span>
                                    }
                                    else if (position == 2)
                                    {
                                        <span class="medal">ü•à</span>
                                    }
                                    else if (position == 3)
                                    {
                                        <span class="medal">ü•â</span>
                                    }
                                    else
                                    {
                                        <span class="position-number">@position</span>
                                    }
                                </div>
                                
                                <div class="team-details">
                                    <div class="team-name">@entry.TeamName</div>
                                    <div class="team-school">@entry.CompletedRounds kol dokonƒçeno</div>
                                </div>
                                
                                @if (positionChange != 0)
                                {
                                    <div class="position-change">
                                        @if (positionChange > 0)
                                        {
                                            <span class="change-arrow up">^@Math.Abs(positionChange)</span>
                                        }
                                        else
                                        {
                                            <span class="change-arrow down">‚Üì@Math.Abs(positionChange)</span>
                                        }
                                    </div>
                                }
                                
                                <div class="team-score-display">
                                    <div class="score-number">@entry.TotalScore</div>
                                    <div class="score-label">bod≈Ø</div>
                                </div>
                                
                                <!-- Achievement badges - TODO: naƒç√≠st z TeamAchievements -->
                                <div class="achievement-badges">
                                    <span class="rounds-badge">üèÅ @entry.CompletedRounds</span>
                                </div>
                            </div>
                        }
                    </div>
                    
                    <!-- Statistics -->
                    <div class="stats-bar">
                        <div class="stat-item">
                            <span class="stat-icon">üìä</span>
                            <span class="stat-label">Pr≈Ømƒõr:</span>
                            <span class="stat-value">@GetAverageScore() bod≈Ø</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-icon">üèÜ</span>
                            <span class="stat-label">Nejlep≈°√≠:</span>
                            <span class="stat-value">@GetTopScore() bod≈Ø</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-icon">üë•</span>
                            <span class="stat-label">T√Ωm≈Ø:</span>
                            <span class="stat-value">@_leaderboard.Count</span>
                        </div>
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <span class="material-symbols-outlined">emoji_events</span>
                        <p>≈Ωeb≈ô√≠ƒçek bude zve≈ôejnƒõn po zaƒç√°tku soutƒõ≈æe</p>
                    </div>
                }
            </div>
        </div>
    }
    
    <!-- Debug Log - Only for Admins -->
    @if (UserSession.HasRole(BlazorApp1.Models.UserRole.Admin) && !string.IsNullOrEmpty(_debugLog))
    {
        <div class="debug-section">
            <h3>
                <span class="material-symbols-outlined">bug_report</span>
                Admin Debug Log
            </h3>
            <pre class="debug-log">@_debugLog</pre>
        </div>
    }
</div>

<!-- Modal: Jste na ≈ôadƒõ -->
@if (_showYourTurnModal)
{
    <div class="your-turn-modal-overlay" @onclick="CloseYourTurnModal">
        <div class="your-turn-modal" @onclick:stopPropagation="true">
            <div class="modal-icon">
                <span class="material-symbols-outlined">notifications_active</span>
            </div>
            <h2>üéØ JSTE NA ≈òADƒö!</h2>
            <div class="team-name-large">@_yourTurnTeamName</div>
            <p class="position-info">
                @if (_yourTurnPosition == 1)
                {
                    <text>P≈ôipravte se na <strong>St≈Øl A</strong></text>
                }
                else if (_yourTurnPosition == 2)
                {
                    <text>P≈ôipravte se na <strong>St≈Øl B</strong></text>
                }
                else
                {
                    <text>Pozice: @_yourTurnPosition</text>
                }
            </p>
            <button class="btn-confirm" @onclick="CloseYourTurnModal">
                <span class="material-symbols-outlined">check_circle</span>
                Rozum√≠m
            </button>
        </div>
    </div>
}

@code {
    private bool _isLoading = true;
    private string? _error = null;
    private List<BlazorApp1.Models.LeaderboardEntry>? _leaderboard = null;
    private BlazorApp1.Models.CompetitionSettings? _settings = null;
    private BlazorApp1.Models.Team? _currentTeamA = null;
    private BlazorApp1.Models.Team? _currentTeamB = null;
    private BlazorApp1.Models.Team? _nextTeamA = null;
    private BlazorApp1.Models.Team? _nextTeamB = null;
    private int _timerRemaining = 90;
    private BlazorApp1.Models.TimerStatus _timerStatus = BlazorApp1.Models.TimerStatus.Stopped;
    private BlazorApp1.Models.GameStatus _currentGameStatus = BlazorApp1.Models.GameStatus.Preparation;
    private string _debugLog = "";
    
    // Position tracking for animations
    private Dictionary<string, int> _previousPositions = new();
    
    // Modal state
    private bool _showYourTurnModal = false;
    private string _yourTurnTeamName = "";
    private int _yourTurnPosition = 0;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to GameStatus changes
        GameStatusService.OnGameStatusChanged += HandleGameStatusChanged;
        
        // Subscribe to score updates
        ScoreNotificationService.OnRoundCompleted += HandleRoundCompleted;
        
        // Subscribe to competition notification events
        CompetitionNotificationService.OnRoundChanged += HandleRoundChanged;
        CompetitionNotificationService.OnCompetitionStatusChanged += HandleCompetitionStatusChanged;
        CompetitionNotificationService.OnCurrentTeamsChanged += HandleCurrentTeamsChanged;
        CompetitionNotificationService.OnNextTeamsChanged += HandleNextTeamsChanged;
        CompetitionNotificationService.OnRoundOrderChanged += HandleRoundOrderChanged;
        CompetitionNotificationService.OnLeaderboardUpdated += HandleLeaderboardUpdated;
        CompetitionNotificationService.OnYourTurn += HandleYourTurn;
        
        await LoadData();
    }
    
    // Event handlers for competition notifications
    private async Task HandleRoundChanged(int newRound)
    {
        await InvokeAsync(async () =>
        {
            Console.WriteLine($"[Home] Round changed to {newRound}");
            AddDebugLog($"Kolo zmƒõnƒõno na {newRound}");
            if (_settings != null)
            {
                _settings.CurrentRound = newRound;
            }
            await LoadData(); // Reload all data
            StateHasChanged();
        });
    }
    
    private async Task HandleCompetitionStatusChanged(BlazorApp1.Models.CompetitionStatus newStatus)
    {
        await InvokeAsync(() =>
        {
            Console.WriteLine($"[Home] Competition status changed to {newStatus}");
            AddDebugLog($"Stav soutƒõ≈æe zmƒõnƒõn na {newStatus}");
            if (_settings != null)
            {
                _settings.Status = newStatus;
            }
            StateHasChanged();
            return Task.CompletedTask;
        });
    }
    
    private async Task HandleCurrentTeamsChanged(string? teamAId, string? teamBId)
    {
        await InvokeAsync(async () =>
        {
            Console.WriteLine($"[Home] Current teams changed: A={teamAId}, B={teamBId}");
            AddDebugLog($"Aktu√°ln√≠ t√Ωmy zmƒõnƒõny");
            if (_settings != null)
            {
                _settings.CurrentTeamAId = teamAId;
                _settings.CurrentTeamBId = teamBId;
            }
            await LoadCurrentTeams();
            StateHasChanged();
        });
    }
    
    private async Task HandleNextTeamsChanged(string? teamAId, string? teamBId)
    {
        await InvokeAsync(async () =>
        {
            Console.WriteLine($"[Home] Next teams changed: A={teamAId}, B={teamBId}");
            if (_settings != null)
            {
                _settings.NextTeamAId = teamAId;
                _settings.NextTeamBId = teamBId;
            }
            await LoadNextTeams();
            StateHasChanged();
        });
    }
    
    private async Task HandleRoundOrderChanged(int roundNumber)
    {
        await InvokeAsync(async () =>
        {
            Console.WriteLine($"[Home] Round order changed for round {roundNumber}");
            AddDebugLog($"Po≈ôad√≠ kola {roundNumber} bylo aktualizov√°no");
            await LoadData(); // Reload to get new order
            StateHasChanged();
        });
    }
    
    private async Task HandleLeaderboardUpdated()
    {
        await InvokeAsync(async () =>
        {
            Console.WriteLine($"[Home] Leaderboard updated");
            AddDebugLog("≈Ωeb≈ô√≠ƒçek aktualizov√°n");
            await ReloadLeaderboard();
            StateHasChanged();
        });
    }
    
    private async Task HandleYourTurn(string teamId, string teamName, int position)
    {
        await InvokeAsync(() =>
        {
            // Only show modal if this is the logged-in team
            if (UserSession.IsAuthenticated && 
                UserSession.Role == BlazorApp1.Models.UserRole.Team && 
                UserSession.TeamId == teamId)
            {
                Console.WriteLine($"[Home] Your turn notification: {teamName}, position {position}");
                AddDebugLog($"JSTE NA ≈òADƒö! {teamName}");
                _yourTurnTeamName = teamName;
                _yourTurnPosition = position;
                _showYourTurnModal = true;
                StateHasChanged();
            }
            return Task.CompletedTask;
        });
    }
    
    private async Task HandleGameStatusChanged(BlazorApp1.Models.GameStatus newStatus)
    {
        await InvokeAsync(() =>
        {
            Console.WriteLine($"[Home] Game status changed to: {newStatus}");
            _currentGameStatus = newStatus;
            StateHasChanged();
        });
    }
    
    private async Task HandleRoundCompleted(string teamId, BlazorApp1.Models.RoundCompletedNotification notification)
    {
        await InvokeAsync(async () =>
        {
            Console.WriteLine($"[Home] Round completed for team {teamId}, reloading leaderboard...");
            AddDebugLog($"Round completed: Team={teamId}, Score={notification.TotalScore}");
            
            // Reload leaderboard
            await ReloadLeaderboard();
        });
    }
    
    private async Task ReloadLeaderboard()
    {
        try
        {
            var oldLeaderboard = _leaderboard?.ToList() ?? new List<BlazorApp1.Models.LeaderboardEntry>();
            
            // Load new leaderboard
            _leaderboard = await FinalScoreService.GetDetailedLeaderboardAsync();
            
            // Update previous positions from old leaderboard
            foreach (var entry in _leaderboard)
            {
                var oldEntry = oldLeaderboard.FirstOrDefault(e => e.TeamId == entry.TeamId);
                if (oldEntry != null)
                {
                    entry.PreviousPosition = oldEntry.Position;
                }
                else
                {
                    entry.PreviousPosition = entry.Position; // New team
                }
            }
            
            AddDebugLog($"Leaderboard reloaded: {_leaderboard.Count} teams");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            AddDebugLog($"Error reloading leaderboard: {ex.Message}");
        }
    }
    
    public void Dispose()
    {
        // Unsubscribe from all events
        GameStatusService.OnGameStatusChanged -= HandleGameStatusChanged;
        ScoreNotificationService.OnRoundCompleted -= HandleRoundCompleted;
        
        CompetitionNotificationService.OnRoundChanged -= HandleRoundChanged;
        CompetitionNotificationService.OnCompetitionStatusChanged -= HandleCompetitionStatusChanged;
        CompetitionNotificationService.OnCurrentTeamsChanged -= HandleCurrentTeamsChanged;
        CompetitionNotificationService.OnNextTeamsChanged -= HandleNextTeamsChanged;
        CompetitionNotificationService.OnRoundOrderChanged -= HandleRoundOrderChanged;
        CompetitionNotificationService.OnLeaderboardUpdated -= HandleLeaderboardUpdated;
        CompetitionNotificationService.OnYourTurn -= HandleYourTurn;
    }
    
    private void CloseYourTurnModal()
    {
        _showYourTurnModal = false;
        StateHasChanged();
    }

    private async Task LoadData()
    {
        _isLoading = true;
        _error = null;
        StateHasChanged();
        
        try
        {
            AddDebugLog("Naƒç√≠t√°m data...");
            
            // Load leaderboard from FinalRoundScores
            _leaderboard = await FinalScoreService.GetDetailedLeaderboardAsync();
            AddDebugLog($"Naƒçteno {_leaderboard?.Count ?? 0} t√Ωm≈Ø v ≈æeb≈ô√≠ƒçku");
            
            // Load settings
            var allSettings = await SettingsRepository.GetAllAsync();
            _settings = allSettings.FirstOrDefault() ?? new BlazorApp1.Models.CompetitionSettings();
            AddDebugLog($"Aktu√°ln√≠ kolo: {_settings.CurrentRound}, Status: {_settings.Status}");
            
            // Load current game status
            _currentGameStatus = GameStatusService.GetCurrentStatus();
            AddDebugLog($"Game status: {_currentGameStatus}");
            
            // Load current match teams
            if (!string.IsNullOrEmpty(_settings.CurrentTeamAId))
            {
                _currentTeamA = await TeamService.GetTeamByIdAsync(_settings.CurrentTeamAId);
            }
            if (!string.IsNullOrEmpty(_settings.CurrentTeamBId))
            {
                _currentTeamB = await TeamService.GetTeamByIdAsync(_settings.CurrentTeamBId);
            }
            
            // Load next match teams
            if (!string.IsNullOrEmpty(_settings.NextTeamAId))
            {
                _nextTeamA = await TeamService.GetTeamByIdAsync(_settings.NextTeamAId);
            }
            if (!string.IsNullOrEmpty(_settings.NextTeamBId))
            {
                _nextTeamB = await TeamService.GetTeamByIdAsync(_settings.NextTeamBId);
            }
            
            // Load timer status
            _timerRemaining = await TimerService.GetRemainingSecondsAsync();
            _timerStatus = TimerService.GetStatus();
            AddDebugLog($"Timer: {_timerRemaining}s, Status: {_timerStatus}");
            
            // Track initial positions
            UpdatePositionTracking();
            
            _isLoading = false;
            AddDebugLog("Naƒç√≠t√°n√≠ dokonƒçeno");
        }
        catch (Exception ex)
        {
            _error = $"Typ: {ex.GetType().Name}\nZpr√°va: {ex.Message}\n\nStack Trace:\n{ex.StackTrace}";
            AddDebugLog($"CHYBA: {ex.GetType().Name} - {ex.Message}");
            _isLoading = false;
        }
        
        StateHasChanged();
    }

    private async Task ReloadData()
    {
        await LoadData();
    }
    
    private async Task LoadCurrentTeams()
    {
        if (_settings == null) return;
        
        _currentTeamA = null;
        _currentTeamB = null;
        
        if (!string.IsNullOrEmpty(_settings.CurrentTeamAId))
        {
            _currentTeamA = await TeamService.GetTeamByIdAsync(_settings.CurrentTeamAId);
        }
        if (!string.IsNullOrEmpty(_settings.CurrentTeamBId))
        {
            _currentTeamB = await TeamService.GetTeamByIdAsync(_settings.CurrentTeamBId);
        }
    }
    
    private async Task LoadNextTeams()
    {
        if (_settings == null) return;
        
        _nextTeamA = null;
        _nextTeamB = null;
        
        if (!string.IsNullOrEmpty(_settings.NextTeamAId))
        {
            _nextTeamA = await TeamService.GetTeamByIdAsync(_settings.NextTeamAId);
        }
        if (!string.IsNullOrEmpty(_settings.NextTeamBId))
        {
            _nextTeamB = await TeamService.GetTeamByIdAsync(_settings.NextTeamBId);
        }
    }

    private void UpdatePositionTracking()
    {
        if (_leaderboard == null) return;
        
        _previousPositions.Clear();
        foreach (var entry in _leaderboard)
        {
            _previousPositions[entry.TeamId] = entry.Position;
        }
    }
    
    private int GetPositionChange(string teamId)
    {
        if (!_previousPositions.ContainsKey(teamId) || _leaderboard == null)
            return 0;
        
        var currentEntry = _leaderboard.FirstOrDefault(e => e.TeamId == teamId);
        if (currentEntry == null) return 0;
        
        var previousPosition = _previousPositions[teamId];
        
        // Positive = moved up, Negative = moved down
        return previousPosition - currentEntry.Position;
    }
    
    private string GetPositionChangeClass(int change)
    {
        if (change > 0) return "position-up";
        if (change < 0) return "position-down";
        return "";
    }

    private string FormatTime(int seconds)
    {
        var minutes = seconds / 60;
        var secs = seconds % 60;
        return $"{minutes:00}:{secs:00}";
    }
    
    private string GetStatusText(BlazorApp1.Models.CompetitionStatus status)
    {
        return status switch
        {
            BlazorApp1.Models.CompetitionStatus.NotStarted => "P≈ô√≠prava",
            BlazorApp1.Models.CompetitionStatus.InProgress => "Prob√≠h√°",
            BlazorApp1.Models.CompetitionStatus.Paused => "Pauza",
            BlazorApp1.Models.CompetitionStatus.Finished => "Ukonƒçeno",
            _ => status.ToString()
        };
    }
    
    private double GetAverageScore()
    {
        if (_leaderboard == null || !_leaderboard.Any()) return 0;
        return Math.Round(_leaderboard.Average(e => e.TotalScore), 1);
    }
    
    private int GetTopScore()
    {
        if (_leaderboard == null || !_leaderboard.Any()) return 0;
        return _leaderboard.Max(e => e.TotalScore);
    }

    private void AddDebugLog(string message)
    {
        var timestamp = DateTime.Now.ToString("HH:mm:ss.fff");
        _debugLog += $"[{timestamp}] {message}\n";
    }
}

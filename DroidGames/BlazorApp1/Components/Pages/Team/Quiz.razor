@page "/team/quiz"
@using BlazorApp1.Models
@using BlazorApp1.Services
@using BlazorApp1.Components.Shared
@inject IQuizService QuizService
@inject IAchievementService AchievementService
@inject UserSession UserSession
@rendermode InteractiveServer

<PageTitle>Kvíz - DroidGames</PageTitle>

<AuthGuard RequiredRole="UserRole.Team">
    <div class="quiz-page">
        <h1>
            <span class="material-symbols-outlined">quiz</span>
            Kvíz
        </h1>

        @if (_loading)
        {
            <div class="loading">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Načítání...</span>
                </div>
            </div>
        }
        else
        {
            <!-- Statistiky -->
            <div class="stats-container mb-4">
                <div class="stat-card">
                    <span class="material-symbols-outlined">analytics</span>
                    <div class="stat-content">
                        <div class="stat-label">Celková úspěšnost</div>
                        <div class="stat-value">@(_progress.SuccessRate.ToString("F1"))%</div>
                    </div>
                </div>
                <div class="stat-card success">
                    <span class="material-symbols-outlined">check_circle</span>
                    <div class="stat-content">
                        <div class="stat-label">Správně</div>
                        <div class="stat-value">@_progress.CorrectAnswers</div>
                    </div>
                </div>
                <div class="stat-card error">
                    <span class="material-symbols-outlined">cancel</span>
                    <div class="stat-content">
                        <div class="stat-label">Špatně</div>
                        <div class="stat-value">@_progress.IncorrectAnswers</div>
                    </div>
                </div>
                <div class="stat-card info">
                    <span class="material-symbols-outlined">quiz</span>
                    <div class="stat-content">
                        <div class="stat-label">Zodpovězeno</div>
                        <div class="stat-value">@_progress.AnsweredQuestionIds.Count / @_allStatuses.Count</div>
                    </div>
                </div>
            </div>

            <!-- Mystery Box pro náhodnou otázku - 3D Flip -->
            <div class="mystery-box-section mb-4">
                <div class="mystery-box-container" @onclick="OpenRandomQuestionWithAnimation">
                    <div class="mystery-box @(_isShaking ? "shake" : "") @(_isFlipping ? "flip" : "")">
                        <!-- Front Side -->
                        <div class="mystery-box-side mystery-box-front">
                            <div class="mystery-box-inner">
                                <div class="mystery-icon-wrapper">
                                    <span class="material-symbols-outlined mystery-icon">casino</span>
                                    <span class="material-symbols-outlined mystery-icon-sparkle">auto_awesome</span>
                                </div>
                                <h3 class="mystery-title">Náhodná otázka</h3>
                                <p class="mystery-subtitle">
                                    @if (_unansweredCount > 0)
                                    {
                                        <span>Klikni a zkus štěstí!</span>
                                        <span class="mystery-badge">@_unansweredCount nezodpovězených</span>
                                    }
                                    else
                                    {
                                        <span class="text-success">✨ Všechny otázky zodpovězeny!</span>
                                    }
                                </p>
                                @if (_unansweredCount > 0)
                                {
                                    <div class="mystery-hint">
                                        <span class="material-symbols-outlined">touch_app</span>
                                        Klikni mě!
                                    </div>
                                }
                            </div>
                            @if (_unansweredCount > 0)
                            {
                                <div class="mystery-particles">
                                    <span class="particle"></span>
                                    <span class="particle"></span>
                                    <span class="particle"></span>
                                    <span class="particle"></span>
                                    <span class="particle"></span>
                                    <span class="particle"></span>
                                </div>
                            }
                        </div>
                        
                        <!-- Back Side - Question Preview -->
                        <div class="mystery-box-side mystery-box-back">
                            <div class="question-preview-icon">
                                <span class="material-symbols-outlined">help_outline</span>
                            </div>
                            @if (_previewQuestion != null)
                            {
                                <div class="preview-question">@_previewQuestion.Question</div>
                            }
                            else
                            {
                                <div class="preview-loading">Načítám otázku...</div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Mřížka všech otázek -->
            <h2 class="section-title mb-3">
                <span class="material-symbols-outlined">grid_view</span>
                Všechny otázky
            </h2>
            <div class="questions-grid">
                @foreach (var status in _allStatuses)
                {
                    <div class="question-card @GetStateClass(status.State)" @onclick="() => OpenQuestion(status.Question)">
                        <div class="question-number">Otázka #@(_allStatuses.IndexOf(status) + 1)</div>
                        <div class="question-text">@status.Question.Question</div>
                        <div class="question-status">
                            @if (status.State == QuizQuestionState.Unanswered)
                            {
                                <span class="material-symbols-outlined status-icon unanswered">help_outline</span>
                                <span class="status-text">Nezodpovězeno</span>
                            }
                            else if (status.State == QuizQuestionState.Correct)
                            {
                                <span class="material-symbols-outlined status-icon correct">check_circle</span>
                                <span class="status-text">Správně</span>
                            }
                            else
                            {
                                <span class="material-symbols-outlined status-icon incorrect">cancel</span>
                                <span class="status-text">Špatně (@status.TotalAttempts pokusů)</span>
                            }
                        </div>
                        @if (status.TotalAttempts > 0)
                        {
                            <div class="attempts-info">
                                <small>
                                    @status.CorrectAttempts správně / @status.IncorrectAttempts špatně
                                </small>
                            </div>
                        }
                    </div>
                }
            </div>
        }

        <!-- Modal pro otázku -->
        @if (_selectedQuestion != null)
        {
            <QuizQuestionModal 
                Question="_selectedQuestion" 
                OnSubmit="@((tuple) => HandleAnswerSubmit(tuple.selectedAnswerIndex, tuple.timeToAnswerMs))" 
                OnClose="CloseModal" />
        }
        
        <!-- Achievement Notification -->
        @if (_showAchievementNotification && _newAchievements.Any())
        {
            <div class="achievement-notification">
                @foreach (var achievement in _newAchievements)
                {
                    <div class="achievement-card @GetRarityClass(achievement.Rarity)">
                        <div class="achievement-icon">
                            <span class="material-symbols-outlined">@achievement.Icon</span>
                        </div>
                        <div class="achievement-content">
                            <div class="achievement-title">Achievement Unlocked!</div>
                            <div class="achievement-name">@achievement.Name</div>
                            <div class="achievement-desc">@achievement.Description</div>
                        </div>
                        <div class="achievement-rarity">@achievement.Rarity</div>
                    </div>
                }
            </div>
        }
    </div>
</AuthGuard>

@code {
    private QuizProgress _progress = new();
    private List<QuizQuestionStatus> _allStatuses = new();
    private QuizQuestion? _selectedQuestion;
    private bool _loading = true;
    private int _unansweredCount = 0;
    private bool _isShaking = false;
    private bool _isFlipping = false;
    private QuizQuestion? _previewQuestion = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _loading = true;
        
        var teamId = UserSession.TeamId ?? string.Empty;
        _progress = await QuizService.GetTeamProgressAsync(teamId);
        _allStatuses = await QuizService.GetAllQuestionsWithStatusAsync(teamId);
        _unansweredCount = _allStatuses.Count(s => s.State == QuizQuestionState.Unanswered);
        
        _loading = false;
    }

    private async Task OpenRandomQuestionWithAnimation()
    {
        if (_unansweredCount == 0) return;
        
        // Step 1: Shake animation
        _isShaking = true;
        StateHasChanged();
        await Task.Delay(600);
        _isShaking = false;
        
        // Step 2: Load random question
        var teamId = UserSession.TeamId ?? string.Empty;
        _previewQuestion = await QuizService.GetRandomUnansweredQuestionAsync(teamId);
        
        if (_previewQuestion == null)
        {
            StateHasChanged();
            return;
        }
        
        // Step 3: 3D Flip animation
        _isFlipping = true;
        StateHasChanged();
        await Task.Delay(1000); // Flip animation duration
        
        // Step 4: Show question on back side for 3 seconds
        await Task.Delay(1500);
        
        // Step 5: Open modal with zoom animation
        _selectedQuestion = _previewQuestion;
        _isFlipping = false;
        _previewQuestion = null;
        StateHasChanged();
    }

    private async Task OpenRandomQuestion()
    {
        var teamId = UserSession.TeamId ?? string.Empty;
        _selectedQuestion = await QuizService.GetRandomUnansweredQuestionAsync(teamId);
    }

    private void OpenQuestion(QuizQuestion question)
    {
        _selectedQuestion = question;
    }

    private List<Achievement> _newAchievements = new();
    private bool _showAchievementNotification = false;

    private async Task HandleAnswerSubmit(int selectedAnswerIndex, int timeToAnswerMs)
    {
        if (_selectedQuestion == null) return;
        
        var teamId = UserSession.TeamId ?? string.Empty;
        var attempt = await QuizService.SubmitAttemptAsync(teamId, _selectedQuestion.Id, selectedAnswerIndex, timeToAnswerMs);
        
        // Reload data
        await LoadData();
        
        // Check for achievements
        var newAchievements = await AchievementService.CheckQuizAchievementsAsync(teamId, _progress, attempt);
        if (newAchievements.Any())
        {
            _newAchievements = newAchievements;
            _showAchievementNotification = true;
            StateHasChanged();
            
            // Auto-hide after 5 seconds
            await Task.Delay(5000);
            _showAchievementNotification = false;
            StateHasChanged();
        }
    }

    private void CloseModal()
    {
        _selectedQuestion = null;
    }

    private string GetStateClass(QuizQuestionState state)
    {
        return state switch
        {
            QuizQuestionState.Unanswered => "state-unanswered",
            QuizQuestionState.Correct => "state-correct",
            QuizQuestionState.Incorrect => "state-incorrect",
            _ => ""
        };
    }
    
    private string GetRarityClass(AchievementRarity rarity)
    {
        return rarity switch
        {
            AchievementRarity.Common => "rarity-common",
            AchievementRarity.Rare => "rarity-rare",
            AchievementRarity.Epic => "rarity-epic",
            AchievementRarity.Legendary => "rarity-legendary",
            _ => ""
        };
    }
}

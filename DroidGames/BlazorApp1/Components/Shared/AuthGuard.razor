@inject BlazorApp1.Services.UserSession UserSession
@inject NavigationManager Navigation

@if (_isAuthorized)
{
    @ChildContent
}
else if (_isChecking)
{
    <div style="min-height: 100vh; display: flex; align-items: center; justify-content: center; background: #1a1a1a;">
        <div style="text-align: center; color: #00d4ff;">
            <div style="font-size: 3em; margin-bottom: 20px;">⏳</div>
            <div style="font-size: 1.2em;">Ověřuji oprávnění...</div>
        </div>
    </div>
}
else
{
    <div style="min-height: 100vh; display: flex; align-items: center; justify-content: center; background: #1a1a1a;">
        <div style="max-width: 500px; padding: 40px; background: #2a2a2a; border-radius: 12px; text-align: center;">
            <div style="font-size: 4em; margin-bottom: 20px;">🚫</div>
            <h2 style="color: #ff6600; margin-bottom: 15px;">Přístup odepřen</h2>
            <p style="color: #aaa; margin-bottom: 25px;">
                @if (!UserSession.IsAuthenticated)
                {
                    <span>Pro přístup k této stránce se musíte přihlásit.</span>
                }
                else
                {
                    <span>Nemáte oprávnění pro přístup k této stránce.<br/>Vaše role: <strong>@UserSession.Role</strong></span>
                }
            </p>
            <button @onclick="RedirectToLogin" 
                    style="padding: 12px 30px; background: #00d4ff; color: white; border: none; border-radius: 8px; cursor: pointer; font-size: 1em;">
                @if (UserSession.IsAuthenticated)
                {
                    <span>🏠 Zpět na domovskou stránku</span>
                }
                else
                {
                    <span>🔐 Přejít na přihlášení</span>
                }
            </button>
        </div>
    </div>
}

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public BlazorApp1.Models.UserRole[]? RequiredRoles { get; set; }

    private bool _isAuthorized = false;
    private bool _isChecking = true;

    protected override void OnInitialized()
    {
        CheckAuthorization();
        UserSession.OnChange += OnUserSessionChanged;
    }

    private void OnUserSessionChanged()
    {
        CheckAuthorization();
        StateHasChanged();
    }

    private void CheckAuthorization()
    {
        _isChecking = true;

        // Pokud nejsou požadovány žádné role, stačí být přihlášen
        if (RequiredRoles == null || RequiredRoles.Length == 0)
        {
            _isAuthorized = UserSession.IsAuthenticated;
        }
        else
        {
            _isAuthorized = UserSession.IsAuthenticated && UserSession.HasAnyRole(RequiredRoles);
        }

        _isChecking = false;

        // Pokud není autorizován a není to přihlašovací stránka, přesměruj
        if (!_isAuthorized && !_isChecking)
        {
            var currentPath = Navigation.ToBaseRelativePath(Navigation.Uri);
            if (currentPath != "login" && currentPath != "logout")
            {
                Console.WriteLine($"[AuthGuard] Unauthorized access attempt to: {currentPath}");
            }
        }
    }

    private void RedirectToLogin()
    {
        if (UserSession.IsAuthenticated)
        {
            // Přesměruj na domovskou stránku podle role
            var redirectUrl = UserSession.Role switch
            {
                BlazorApp1.Models.UserRole.Team => "/team/dashboard",
                BlazorApp1.Models.UserRole.Referee => "/referee/scoring",
                BlazorApp1.Models.UserRole.HeadReferee => "/headref/control",
                BlazorApp1.Models.UserRole.Production => "/production/director",
                BlazorApp1.Models.UserRole.Admin => "/admin/teams",
                _ => "/"
            };
            Navigation.NavigateTo(redirectUrl);
        }
        else
        {
            Navigation.NavigateTo("/login");
        }
    }

    public void Dispose()
    {
        UserSession.OnChange -= OnUserSessionChanged;
    }
}

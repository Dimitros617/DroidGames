@inject BlazorApp1.Services.UserSession UserSession
@inject NavigationManager Navigation

@if (_isAuthorized)
{
    @ChildContent
}
else if (_isChecking)
{
    <div class="auth-guard-loading">
        <div class="loading-content">
            <span class="material-symbols-outlined spinning">progress_activity</span>
            <div class="loading-text">Ověřuji oprávnění...</div>
        </div>
    </div>
}
else
{
    <div class="auth-guard-denied">
        <div class="denied-content">
            <div class="denied-icon">
                <span class="material-symbols-outlined">block</span>
            </div>
            <h2 class="denied-title">Přístup odepřen</h2>
            <p class="denied-message">
                @if (!UserSession.IsAuthenticated)
                {
                    <span>Pro přístup k této stránce se musíte přihlásit.</span>
                }
                else
                {
                    <span>Nemáte oprávnění pro přístup k této stránce.<br/>Vaše role: <strong>@UserSession.Role</strong></span>
                }
            </p>
            <button @onclick="RedirectToLogin" class="denied-button">
                <span class="material-symbols-outlined">
                    @if (UserSession.IsAuthenticated)
                    {
                        <text>home</text>
                    }
                    else
                    {
                        <text>login</text>
                    }
                </span>
                <span>
                    @if (UserSession.IsAuthenticated)
                    {
                        <text>Zpět na domovskou stránku</text>
                    }
                    else
                    {
                        <text>Přejít na přihlášení</text>
                    }
                </span>
            </button>
        </div>
    </div>
}

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public BlazorApp1.Models.UserRole[]? RequiredRoles { get; set; }

    [Parameter]
    public string? RequiredRole { get; set; }

    private bool _isAuthorized = false;
    private bool _isChecking = true;

    protected override void OnInitialized()
    {
        UserSession.OnChange += OnUserSessionChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UserSession.InitializeAsync();
            CheckAuthorization();
            StateHasChanged();
        }
    }

    private void OnUserSessionChanged()
    {
        CheckAuthorization();
        StateHasChanged();
    }

    private void CheckAuthorization()
    {
        _isChecking = true;

        // Admin má vždy přístup všude
        if (UserSession.IsAuthenticated && UserSession.Role == BlazorApp1.Models.UserRole.Admin)
        {
            _isAuthorized = true;
            _isChecking = false;
            return;
        }

        // Pokud je RequiredRole zadán jako string, převeď ho na pole
        BlazorApp1.Models.UserRole[]? rolesToCheck = RequiredRoles;
        
        if (!string.IsNullOrEmpty(RequiredRole) && Enum.TryParse<BlazorApp1.Models.UserRole>(RequiredRole.Split('.').Last(), out var role))
        {
            rolesToCheck = new[] { role };
        }

        // Pokud nejsou požadovány žádné role, stačí být přihlášen
        if (rolesToCheck == null || rolesToCheck.Length == 0)
        {
            _isAuthorized = UserSession.IsAuthenticated;
        }
        else
        {
            _isAuthorized = UserSession.IsAuthenticated && UserSession.HasAnyRole(rolesToCheck);
        }

        _isChecking = false;

        // Pokud není autorizován a není to přihlašovací stránka, přesměruj
        if (!_isAuthorized && !_isChecking)
        {
            var currentPath = Navigation.ToBaseRelativePath(Navigation.Uri);
            if (currentPath != "login" && currentPath != "logout")
            {
                Console.WriteLine($"[AuthGuard] Unauthorized access attempt to: {currentPath}");
            }
        }
    }

    private void RedirectToLogin()
    {
        if (UserSession.IsAuthenticated)
        {
            // Přesměruj na domovskou stránku podle role
            var redirectUrl = UserSession.Role switch
            {
                BlazorApp1.Models.UserRole.Team => "/team/dashboard",
                BlazorApp1.Models.UserRole.Referee => "/referee/scoring",
                BlazorApp1.Models.UserRole.HeadReferee => "/headref/control",
                BlazorApp1.Models.UserRole.Production => "/production/director",
                BlazorApp1.Models.UserRole.Admin => "/admin/teams",
                _ => "/"
            };
            Navigation.NavigateTo(redirectUrl);
        }
        else
        {
            Navigation.NavigateTo("/login");
        }
    }

    public void Dispose()
    {
        UserSession.OnChange -= OnUserSessionChanged;
    }
}
